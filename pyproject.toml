[project]
name = "expanse"
version = "0.5.0"
description = "The limitless Python web framework"
authors = [{ name = "SÃ©bastien Eustace", email = "sebastien@eustace.io" }]
requires-python = ">=3.11"
readme = "README.md"
license = "MIT"
keywords = [
    "expanse",
    "framework",
]
dependencies = [
    "alembic>=1.13.2",
    "anyio>=4.2.0",
    "baize>=0.22.0",
    "cleo>=2.1.0",
    "crashtest>=0.4.1",
    "cryptography>=44.0.0",
    "filelock>=3.16.1",
    "httpx>=0.26.0",
    "inflection>=0.5.1",
    "jinja2>=3.1.6",
    "pendulum[test]>=3.1.0",
    "pydantic>=2.11.3",
    "pydantic-settings>=2.8.1",
    "pygments>=2.18.0",
    "sqlalchemy[asyncio]>=2.0.25",
    "uvicorn[standard]>=0.23.2",
    "msgspec>=0.19.0",
]

[project.urls]
Homepage = "https://expanse-framework.com/"
Repository = "https://github.com/expanse-framework/expanse"
Documentation = "https://expanse-framework.com/docs"

[dependency-groups]
test = [
    "aiomysql>=0.2.0",
    "aiosqlite>=0.19.0",
    "asyncmy>=0.2.9",
    "asyncpg>=0.29.0",
    "greenlet>=3.0.3",
    "mysqlclient>=2.2.4",
    "pg8000>=1.30.4",
    "psycopg>=3.1.18",
    "psycopg2>=2.9.9",
    "pymysql>=1.1.1",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.21.1",
    "treat>=0.4.1",
    "pytest-codspeed>=3.2.0",
]
dev = ["pytest-mock>=3.14.0"]
typing = ["types-pygments>=2.18.0.20240506"]
lint = ["mypy>=1.11.2"]

[tool.uv]
default-groups = [
    "test",
    "dev",
    "typing",
    "lint",
]

[build-system]
requires = ["uv_build>=0.8.20"]
build-backend = "uv_build"

[tool.pytest.ini_options]
asyncio_mode = "auto"
markers = [
    "asynchronous: Mark a test as asynchronous",
    "db: Mark a test as requiring a database connection",
]
asyncio_default_fixture_loop_scope = "function"


[tool.ruff]
fix = true
line-length = 88
target-version = "py310"
src = ["src"]
extend-exclude = [
    # External to the project's coding standards:
    "docs/*",
    # ruff disagrees with black when it comes to formatting
    "*.pyi",
]

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]
ignore = [
    "I002",
    "B904",   # use 'raise ... from err'
    "B905",   # use explicit 'strict=' parameter with 'zip()'
    "N818",   #  Exception name should be named with an Error suffix
    "RUF001",
]
unfixable = [
    "ERA", # do not autoremove commented out code
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["expanse"]
known-third-party = []

[tool.mypy]
files = "src, tests"
mypy_path = "src"
show_error_codes = true
pretty = true
warn_unused_ignores = true
warn_no_return = false
follow_imports = "silent"
exclude = [
    "^src/expanse/common/testing/client.py",
    "^src/expanse/common/database/migration/templates/default/env.py",
    "^src/expanse/testing/client.py",
    "^src/expanse/asynchronous/testing/client.py",
]
disable_error_code = ["type-abstract"]


[tool.coverage.run]
omit = [
    "src/expanse/asynchronous/console/_adapters/*",
    "src/expanse/asynchronous/contracts/*",
    "src/expanse/asynchronous/types/*",
    "src/expanse/types/*",
    "src/expanse/common/types/*",
    "src/expanse/common/support/_compat.py",
    "src/expanse/common/support/_utils.py",
    "src/expanse/common/support/_utils.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "raise NotImplementedError",
]

[tool.basedpyright]
reportUnusedCallResult = false
reportExplicitAny = false
pythonVersion = "3.11"
